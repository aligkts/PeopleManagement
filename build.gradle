// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        apply from: 'config/dependencies.gradle'
        apply from: 'config/dependencies.gradle', to: it
        apply from: "$rootDir/config/signing.gradle"
        classpath "com.android.tools.build:gradle:$version.gradle"
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$compiler.kotlin"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        maven { url "https://jitpack.io" }
    }

    afterEvaluate { project ->
        def buildRelease = 'release'
        def isReleaseBuild = getCurrentVariant() == buildRelease
        def propsFilePath = 'keystore/people-keystore.properties'

        if (isReleaseBuild &&
                project.hasProperty("android") &&
                android.signingConfigs.hasProperty(buildRelease)) {
            try {
                def propsFile = rootProject.file(propsFilePath)
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                android.signingConfigs[buildRelease].storeFile = file(props['RELEASE.STORE_FILE'])
                android.signingConfigs[buildRelease].storePassword = props['RELEASE.STORE_PASSWORD']
                android.signingConfigs[buildRelease].keyAlias = props['RELEASE.KEY_ALIAS']
                android.signingConfigs[buildRelease].keyPassword = props['RELEASE.KEY_PASSWORD']
            } catch (ignored) {
                throw new InvalidUserDataException(
                        "You should define\n" +
                                "'RELEASE.STORE_FILE', \n" +
                                "'RELEASE.STORE_PASSWORD', \n" +
                                "'RELEASE.KEY_ALIAS\n" +
                                "'and " +
                                "'RELEASE.KEY_PASSWORD'" +
                                " in keystore.properties. *Rename and update keystore.properties.sample if exists.")
            }
        }
    }
}

import java.util.regex.Matcher
import java.util.regex.Pattern

def getCurrentVariant() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("bundle"))
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("appCenterUpload"))
        pattern = Pattern.compile("appCenterUpload(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        return matcher.group(2).toLowerCase()
    } else {
        return ""
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}